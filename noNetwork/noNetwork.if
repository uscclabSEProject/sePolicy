
## <summary>policy for noNetwork</summary>

########################################
## <summary>
##	Execute noNetwork_exec_t in the noNetwork domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`noNetwork_domtrans',`
	gen_require(`
		type noNetwork_t, noNetwork_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, noNetwork_exec_t, noNetwork_t)
')

######################################
## <summary>
##	Execute noNetwork in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`noNetwork_exec',`
	gen_require(`
		type noNetwork_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, noNetwork_exec_t)
')

########################################
## <summary>
##	Do not audit attempts to read,
##	noNetwork tmp files
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`noNetwork_dontaudit_read_tmp_files',`
	gen_require(`
		type noNetwork_tmp_t;
	')

	dontaudit $1 noNetwork_tmp_t:file read_file_perms;
')

########################################
## <summary>
##	Read noNetwork tmp files
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`noNetwork_read_tmp_files',`
	gen_require(`
		type noNetwork_tmp_t;
	')

	files_search_tmp($1)
	read_files_pattern($1, noNetwork_tmp_t, noNetwork_tmp_t)
')

########################################
## <summary>
##	Manage noNetwork tmp files
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`noNetwork_manage_tmp',`
	gen_require(`
		type noNetwork_tmp_t;
	')

	files_search_tmp($1)
	manage_dirs_pattern($1, noNetwork_tmp_t, noNetwork_tmp_t)
	manage_files_pattern($1, noNetwork_tmp_t, noNetwork_tmp_t)
	manage_lnk_files_pattern($1, noNetwork_tmp_t, noNetwork_tmp_t)
')

########################################
## <summary>
##	Execute noNetwork in the noNetwork domain, and
##	allow the specified role the noNetwork domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the noNetwork domain.
##	</summary>
## </param>
#
interface(`noNetwork_run',`
	gen_require(`
		type noNetwork_t;
		attribute_role noNetwork_roles;
	')

	noNetwork_domtrans($1)
	roleattribute $2 noNetwork_roles;
')

########################################
## <summary>
##	Role access for noNetwork
## </summary>
## <param name="role">
##	<summary>
##	Role allowed access
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	User domain for the role
##	</summary>
## </param>
#
interface(`noNetwork_role',`
	gen_require(`
		type noNetwork_t;
		attribute_role noNetwork_roles;
	')

	roleattribute $1 noNetwork_roles;

	noNetwork_domtrans($2)

	ps_process_pattern($2, noNetwork_t)
	allow $2 noNetwork_t:process { signull signal sigkill };
')

########################################
## <summary>
##	All of the rules required to administrate
##	an noNetwork environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`noNetwork_admin',`
	gen_require(`
		type noNetwork_t;
		type noNetwork_tmp_t;
	')

	allow $1 noNetwork_t:process { signal_perms };
	ps_process_pattern($1, noNetwork_t)

    tunable_policy(`deny_ptrace',`',`
        allow $1 noNetwork_t:process ptrace;
    ')

	files_search_tmp($1)
	admin_pattern($1, noNetwork_tmp_t)
	optional_policy(`
		systemd_passwd_agent_exec($1)
		systemd_read_fifo_file_passwd_run($1)
	')
')
